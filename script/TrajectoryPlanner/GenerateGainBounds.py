#!/usr/bin/env python

"""
Python program that calculates the lower bounds on the PD gains based on the alpha and K_I value determined by running
GenerateConstants.py before. The new lower bounds on PD gains are added to the .csv file to be used in GeneratePlots.py

Date 2/2/2021
"""

import csv

# FILEPATHS
# Change filepath location path to your GenerateGainsConstants.csv (as if you were running this code from the
# Trajectory Planner directory
FILEPATH = './GenerateGainsConstants.csv'


# Function: Extract Data
# Extracts data from the .csv file generated by GenerateConstants.py
def ExtractData_GainBounds():
    with open(FILEPATH, 'rb') as myfile:
        csvreader = csv.reader(myfile, delimiter=',')
        data = []
        for row in csvreader:
            data.append(row)

    constants = [None] * 14
    for k in range(1,len(constants)+1):
        constants[k-1] = float(data[k][1])

    alpha = float(data[24][1])
    K_I = float(data[25][1])

    return constants, alpha, K_I


# Function: Get PID and Alpha Bounds
# This solves for the bounds on the PID gains given the constants, I gain, and alpha bounds.
def GetGains(c, alpha, ki, printing=True):
    maxEigH, minEigH, maxG, kG, kK, kB, kX, maxEigK, maxEigB, minEigK_p, minEigB_p, kC, k, total_mass =\
        c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11], c[12], c[13]

    K_I = ki # 225
    K_P = (alpha ** 2) * maxEigH + kG + (1 / alpha) * K_I
    K_D = alpha * maxEigH
    if printing is True:
        print "\n==== Gains ===="
        print "K_I =", K_I
        print "K_P =", K_P, "(lower bound)"
        print "K_D =", K_D, "(lower bound)"

    return [K_I, K_P, K_D]


# Function: Main
# Calculates the PID gain bounds and adds them to the .csv file
if __name__ == "__main__":
    # Extract current data from the .csv file generated from GenerateConstants.py
    constants, alpha, K_I = ExtractData_GainBounds()

    # Calculates the gain boundaries using the constants and alpha
    gains = GetGains(constants, alpha, K_I)
    K_I, K_P_lb, K_D_lb = gains[0], gains[1], gains[2]

    # Read CSV file to find PD gain lower bounds rows and PID gain rows
    rows = csv.reader(open(FILEPATH))
    lines = list(rows)
    for n, line in enumerate(lines):
        if list(line)[0] == 'P_lb':
            P_lb_index = n
        if list(line)[0] == 'D_lb':
            D_lb_index = n
        if list(line)[0] == 'P':
            P_index = n
        if list(line)[0] == 'I':
            I_index = n
        if list(line)[0] == 'D':
            D_index = n

    # Edit rows
    lines[P_lb_index] = ['P_lb', str(K_P_lb)]
    lines[D_lb_index] = ['D_lb', str(K_D_lb)]
    lines[P_index] = ['P', str(K_P_lb)]
    lines[I_index] = ['I', str(K_I)]
    lines[D_index] = ['D', str(K_D_lb)]

    # Write new CSV file and overwrite old one
    writer = csv.writer(open(FILEPATH, 'w'))
    writer.writerows(lines)

    print("PD lower bounds calculated and added to .csv file")
